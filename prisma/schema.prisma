// schema.prisma — Recipe Flow (PostgreSQL)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// Enums
// =========================
enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum RecipeStatus {
  DRAFT
  PUBLISHED
  REJECTED
}

enum Provider {
  CREDENTIALS
  GOOGLE
}

enum Platform {
  ANDROID
  IOS
  WEB
}

// =========================
// Core
// =========================
model User {
  id            String            @id @default(cuid())
  email         String            @unique
  passwordHash  String?           // null quando cadastro via OAuth
  name          String
  photoUrl      String?
  role          Role              @default(USER)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  accounts      Account[]
  recipes       Recipe[]          @relation("RecipeAuthor")
  reviews       Review[]
  favorites     Favorite[]
  downloads     OfflineDownload[]
  lists         ShoppingList[]
  views         RecipeView[]
  pushTokens    PushSubscription[]
  dietaryFlags  UserDietaryFlag[]
  moderatedRecipes  Recipe[]          @relation("ModeratedBy")
}

model Account {
  id            String   @id @default(cuid())
  provider      Provider
  providerId    String   // sub do Google, por ex.
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
}

// =========================
// Recipes
// =========================
model Recipe {
  id                String          @id @default(cuid())
  title             String
  description       String?
  authorId          String
  author            User            @relation("RecipeAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  // Metadados culinários
  difficulty        Difficulty?     @default(MEDIUM)
  prepMinutes       Int?            // tempo de preparo
  cookMinutes       Int?            // tempo de cocção
  servings          Int?            // porções
  nutrition         Json?           // { calories, protein, carbs, fat, ... }

  // Publicação & moderação
  status            RecipeStatus    @default(DRAFT)
  publishedAt       DateTime?
  rejectedReason    String?
  moderatedById     String?
  moderatedBy       User?           @relation("ModeratedBy", fields: [moderatedById], references: [id])
  moderatedAt       DateTime?

  // Conteúdo
  photos            RecipePhoto[]
  steps             Step[]
  categories        RecipeCategory[]
  ingredients       RecipeIngredient[]

  // Engajamento
  reviews           Review[]
  favorites         Favorite[]
  downloads         OfflineDownload[]
  views             RecipeView[]

  // i18n básico (título/descrição)
  translations      RecipeTranslation[]

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // associativa
  shoppingListItems ShoppingListItem[]

  // índices para busca por título/categoria/ingrediente
  @@index([title])
  @@index([status, publishedAt])
}

// imagens da receita (URL pública/CDN)
model RecipePhoto {
  id        String  @id @default(cuid())
  recipeId  String
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  url       String
  alt       String?
  order     Int      @default(0)

  @@unique([recipeId, order])
}

// passos com ordem e timer por etapa
model Step {
  id        String  @id @default(cuid())
  recipeId  String
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  order     Int
  text      String
  durationSec Int?  // para modo de preparo interativo (timers)

  @@unique([recipeId, order])
}

// categorias e ligação N:N
model Category {
  id        String            @id @default(cuid())
  name      String            @unique
  slug      String            @unique
  recipes   RecipeCategory[]
}

model RecipeCategory {
  recipeId   String
  categoryId String
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([recipeId, categoryId])
}

// ingredientes e quantidades
model Ingredient {
  id        String              @id @default(cuid())
  name      String              @unique
  // você pode adicionar fields como density, defaultUnit etc. no futuro
  recipes   RecipeIngredient[]
  shoppingListItems ShoppingListItem[]
}

model RecipeIngredient {
  recipeId     String
  ingredientId String
  amount       Float?
  unit         String?   // "g", "ml", "xícara", "colher", etc.

  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@id([recipeId, ingredientId])
}

// =========================
// Social / Engajamento
// =========================
// Avaliações com nota + comentário; 1 review por usuário por receita
model Review {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  rating    Int      // 1..5 (valide na app)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId])
  @@index([recipeId, rating])
}

// Favoritos (lista pessoal)
model Favorite {
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([userId, recipeId])
}

// Downloads offline (marcação do usuário)
model OfflineDownload {
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([userId, recipeId])
}

// Telemetria simples para recomendações futuras (histórico)
model RecipeView {
  id        String   @id @default(cuid())
  userId    String?
  recipeId  String
  createdAt DateTime @default(now())
  source    String?  // "home", "search", "share", etc.

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId, createdAt])
  @@index([userId, createdAt])
}

// =========================
// Listas de compras
// =========================
model ShoppingList {
  id        String               @id @default(cuid())
  userId    String
  title     String               @default("Minha lista")
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     ShoppingListItem[]
}

model ShoppingListItem {
  id             String       @id @default(cuid())
  listId         String
  ingredientId   String?
  recipeId       String?
  note           String?      // texto livre (ex.: "tomate maduro")
  amount         Float?
  unit           String?
  isChecked      Boolean      @default(false)

  list           ShoppingList @relation(fields: [listId], references: [id], onDelete: Cascade)
  ingredient     Ingredient?  @relation(fields: [ingredientId], references: [id], onDelete: SetNull)
  recipe         Recipe?      @relation(fields: [recipeId], references: [id], onDelete: SetNull)

  @@index([listId, isChecked])
}

// =========================
// Notificações Push
// =========================
model PushSubscription {
  id          String   @id @default(cuid())
  userId      String
  platform    Platform
  token       String   @unique // FCM/APNS token
  createdAt   DateTime @default(now())
  lastSeenAt  DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =========================
// Restrições alimentares (filtros)
// =========================
model DietaryRestriction {
  id     String  @id @default(cuid())
  name   String  @unique // "VEGETARIAN", "VEGAN", "GLUTEN_FREE", etc.
  users  UserDietaryFlag[]
}

model UserDietaryFlag {
  userId             String
  dietaryRestrictionId String

  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  dietaryRestriction DietaryRestriction @relation(fields: [dietaryRestrictionId], references: [id], onDelete: Cascade)

  @@id([userId, dietaryRestrictionId])
}

// =========================
// i18n básico
// =========================
// Traduções do título/descrição por idioma (steps/ingredientes podem ficar no idioma base)
model RecipeTranslation {
  id          String  @id @default(cuid())
  recipeId    String
  locale      String  // "pt-BR", "en", ...
  title       String
  description String?

  recipe      Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, locale])
}
